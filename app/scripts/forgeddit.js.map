{"version":3,"sources":["app.js","controllers/admin_delete_user_ctrl.js","controllers/admin_edit_user_ctrl.js","controllers/admin_new_user_ctrl.js","controllers/admin_user_list_ctrl.js","controllers/app_ctrl.js","controllers/link_add_ctrl.js","controllers/link_comment_ctrl.js","controllers/link_content_ctrl.js","controllers/link_list_ctrl.js","controllers/link_vote_ctrl.js","directives/admin_user_list.js","directives/focus.js","directives/footer.js","directives/header.js","directives/link_add.js","directives/link_comment.js","directives/link_content.js","directives/link_list.js","directives/link_thumb.js","directives/link_vote.js","directives/overlay.js","services/auth_token_service.js","services/forgeddit_data_service.js","services/socket_service.js","services/token_interceptor.js","services/user_data_service.js","services/user_service.js","services/utility_service.js","services/vote_data_service.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzzhFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClhGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"forgeddit.js","sourcesContent":["/**\n * @brief  Main-script of the of the web-client\n *\n * Initializes Angular\n * - Authentication-Token\n * - Routes\n *\n * @file app.js\n * @author martin linggi\n */\n\n(function(){\n    'use strict';\n\n    var forgedditApp = angular.module('forgedditApp', ['ngRoute']);\n\n\n\n    // Configuration of authentication-token\n    forgedditApp.config(function ($httpProvider) {\n        $httpProvider.interceptors.push('TokenInterceptor');\n    });\n\n    // Configuration of the routes\n    forgedditApp.config(['$locationProvider', '$routeProvider', function($location, $routeProvider) {\n\n        $routeProvider\n\n            .when ('/', {\n            templateUrl: 'templates/link_view.html',\n            controller: 'AppCtrl',\n            access: {requiredLogin: false}\n        })\n\n            .when ('/login', {\n            templateUrl: 'templates/login_view.html',\n            access: {requiredLogin: false}\n        })\n\n            .when ('/user/create', {\n            templateUrl: '../templates/admin/user_form_view.html',\n            controller: 'AdminNewUserCtrl',\n            access: {requiredLogin: false}\n        })\n\n            .when ('/user/:username', {\n            templateUrl: '../templates/admin/user_form_view.html',\n            controller: 'AdminEditUserCtrl',\n            access: {requiredLogin: true}\n        })\n\n            .when ('/admin/users', {\n            templateUrl: 'templates/admin/user_list_view.html',\n            controller: 'AdminUserListCtrl',\n            access: {requiredLogin: true}\n        })\n\n            .when ('/admin/users/new', {\n            templateUrl: '../templates/admin/user_form_view.html',\n            controller: 'AdminNewUserCtrl',\n            access: {requiredLogin: true}\n        })\n\n            .when ('/admin/users/:username', {\n            templateUrl: '../templates/admin/user_form_view.html',\n            controller: 'AdminEditUserCtrl',\n            access: {requiredLogin: true}\n        })\n\n            .when ('/admin/users/:username/delete', {\n            templateUrl: '../templates/admin/user_delete_view.html',\n            controller: 'AdminDeleteUserCtrl',\n            access: {requiredLogin: true}\n        })\n\n            .otherwise({\n                redirectTo: '/',\n                access: {requiredLogin: false}\n            });\n    }]);\n\n\tforgedditApp.controller('OverlayCtrl', function($scope) {\n\t\tconsole.log('Controller in app.js called');\n\t\t$scope.modalShown = false;\n\t\t$scope.toggleModal = function() {\n\t\t$scope.modalShown = !$scope.modalShown;\n\t\t};\n\t});\n\t\n    forgedditApp.run(function($rootScope, $location, AuthTokenService) {\n        $rootScope.$on(\"$routeChangeStart\", function(event, nextRoute, currentRoute) {\n            if (nextRoute.access && nextRoute.access.requiredLogin && !AuthTokenService.isAuthenticated()) {\n                $location.path(\"/\");\n            }\n        });\n    });\n}());","/**\n * @brief Angular-controller for deleting an user\n *\n * @file admin_delete_user_ctrl.js\n * @author martin linggi\n */\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').controller('AdminDeleteUserCtrl', ['$scope', '$routeParams', '$location', 'UserDataService',\n        function ($scope, $routeParams, $location, UserDataService) {\n\n\n            //=====================================================================\n            // private functions\n            //=====================================================================\n            function goToAdminListView() {\n                $location.path('/admin/users');\n            }\n\n            function getUser() {\n                var userName = $routeParams.username;\n                UserDataService.getUser(userName)\n                    .then(function (res) {\n                        $scope.user = res.data;\n                    }, function (error) {\n                        console.log('An error occured!', error);\n                    });\n            }\n\n            function deleteAction(username) {\n                UserDataService.deleteUserByName(username)\n                    .then(function () {\n                        console.log('  ok.');\n                        goToAdminListView();\n                    }, function (error) {\n                        console.log('An error occured!', error);\n                    });\n            }\n\n            function cancelAction(){\n                goToAdminListView();\n            }\n\n            //=====================================================================\n            // Controller API\n            //=====================================================================\n            $scope.user = {};\n\n            $scope.deleteAction = deleteAction;\n            $scope.cancelAction = cancelAction;\n\n            getUser();\n\n        }]);\n}());","/**\n * @brief Angular-controller for editing an existing user\n *\n * @file admin_edit_user_ctrl.js\n * @author martin linggi\n */\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').controller('AdminEditUserCtrl', ['$scope', '$routeParams', '$location', 'UserDataService',\n        function ($scope, $routeParams, $location, UserDataService) {\n\n\n            //=====================================================================\n            // private functions\n            //=====================================================================\n            function goBack() {\n                if ($location.path().indexOf('/admin/users') === 0) {\n                    $location.path('/admin/users');\n                } else {\n                    $location.path('/');\n                }\n            }\n\n            function getUser() {\n                var userName = $routeParams.username;\n                UserDataService.getUser(userName)\n                    .then(function (res) {\n                        $scope.user = res.data;\n                    }, function (error) {\n                        console.log('An error occured!', error);\n                    });\n            }\n\n            function submitAction() {\n                $scope.userNameError = false;\n                $scope.message = '';\n                var user = $scope.user;\n                user.registrationDate = new Date().getTime();\n                user.lastLoginDate = 0;\n                if (user.password === '') {\n                    delete user.password;\n                }\n                console.log('Update ', user.name);\n                UserDataService.updateUser(user.name, user)\n                    .success(function () {\n                        goBack();\n                    })\n                    .error(function(status, data) {\n                        $scope.userNameError = true;\n                        $scope.message = status;\n                    });\n            }\n\n            function cancelAction(){\n                goBack();\n            }\n\n            //=====================================================================\n            // Controller API\n            //=====================================================================\n            $scope.user = {};\n            $scope.user.role = 'User';\n            $scope.user.blocked = false;\n            $scope.isEditMode = true;\n            $scope.submitBtnLabel = 'Save';\n\n            console.log('url: ' + $location.path());\n\n            $scope.submitAction = submitAction;\n            $scope.cancelAction = cancelAction;\n\n            getUser();\n\n        }]);\n}());","/**\n * @brief Angular-controller for adding a new user\n *\n * @file admin_new_user_ctrl.js\n * @author martin linggi\n */\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').controller('AdminNewUserCtrl', ['$scope', '$location', 'UserDataService', 'UserService',\n        function ($scope, $location, UserDataService, UserService) {\n\n            //=====================================================================\n            // private functions\n            //=====================================================================\n\n            function goBack() {\n                if ($location.path().indexOf('/admin/users') === 0) {\n                    $location.path('/admin/users');\n                } else {\n                    if ($location.path().indexOf('/user/create') === 0) {\n                        $location.path('/login');\n                    }\n                    else {\n                        $location.path('/');\n                    }\n                }\n            }\n\n            function submitAction() {\n                $scope.userNameError = false;\n                $scope.message = '';\n                var user = $scope.user;\n                user.active = true;\n                user.registrationDate = new Date().getTime();\n                user.lastLoginDate = 0;\n                UserDataService.addUser(user)\n                    .success(function () {\n                        goBack();\n                    })\n                    .error(function (data, status) {\n                        $scope.userNameError = true;\n                        $scope.message = data;\n                    });\n            }\n\n            function cancelAction() {\n                goBack();\n            }\n\n            //=====================================================================\n            // Controller API\n            //=====================================================================\n            $scope.user = {};\n            $scope.user.role = 'User';\n            $scope.user.blocked = false;\n            $scope.isEditMode = false;\n            $scope.userNameError = false;\n            $scope.message = '';\n\n            $scope.submitBtnLabel = 'Save';\n\n            $scope.submitAction = submitAction;\n            $scope.cancelAction = cancelAction;\n\n        }]);\n}());\n\n","/**\n * @brief Angular-controller for the user-list\n *\n * @file admin_user_list_ctrl.js\n * @author martin linggi\n */\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').controller('AdminUserListCtrl', ['$scope', 'UserDataService',\n        function ($scope, UserDataService) {\n\n            //=====================================================================\n            // private functions\n            //=====================================================================\n            /**\n             * @brief Gets all the users from the UserDataService\n             */\n            function getUsers() {\n                UserDataService.getUsers()\n                    .then(function (res) {\n                        $scope.users = res.data;\n                    }, function (error) {\n                        console.log('An error occured!', error);\n                    });\n\n            }\n\n            //=====================================================================\n            // Controller API\n            //=====================================================================\n            getUsers();\n        }]);\n}());","/**\n* @brief Angular-controller for editing an existing user\n*\n* @file admin_edit_user_ctrl.js\n* @author martin linggi\n*/\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').controller('AppCtrl', ['$scope', '$location', 'AuthTokenService', 'UserService',\n        function ($scope, $location, AuthTokenService, UserService) {\n\n            //=====================================================================\n            // private functions\n            //=====================================================================\n\n            function getSession(redirect) {\n                UserService.getSessionData().then(function(response) {\n                    console.dir(response.data);\n                    $scope.isLogged = true;\n                    $scope.message = '';\n                    $scope.username = response.data.username;\n                    $scope.hasAdminRights = response.data.role === 'Administrator';\n                    AuthTokenService.setAuthenticated(true);\n                    UserService.setUser(response.data.username, $scope.hasAdminRights);\n                    if (redirect) {\n                        $location.path('/');\n                    }\n                });\n            }\n\n            function login(username, password){\n                if (username !== undefined && password !== undefined) {\n                    UserService.login(username, password)\n                        .success(function(data) {\n                            AuthTokenService.setToken(data.token);\n                            $scope.login.email = '';\n                            $scope.login.password = '';\n                            getSession(true);\n                        })\n                        .error(function(status, data){\n                            console.log(status);\n                            console.log(data);\n                            $scope.message = status;\n                        });\n                    }\n            }\n\n            function logout() {\n                UserService.logout();\n                UserService.setUser('', false);\n                AuthTokenService.setAuthenticated(false);\n                $scope.isLogged = false;\n                $scope.hasAdminRights = false;\n                $scope.username = '';\n                $location.path('/');\n            }\n\n            //=====================================================================\n            // Controller API\n            //=====================================================================\n\n            $scope.isLogged = false;\n            $scope.hasAdminRights = false;\n            $scope.username = '';\n            $scope.message = '';\n            $scope.login = login;\n            $scope.logout = logout;\n            getSession();\n        }\n    ]);\n\n}());","/**\n * @brief Angular-controller for adding a new link\n *\n * @file link_add_ctrl.js\n * @author martin linggi\n */\n\n\n(function() {\n    'use strict';\n\n\n    angular.module('forgedditApp').controller('addLinkController', ['$scope', 'ForgedditDataService', 'UserService', 'UtilityService',\n        function ($scope, ForgedditDataService, UserService, UtilityService) {\n\n            //=====================================================================\n            // private functions\n            //=====================================================================\n\n            function sendLink() {\n                var title = $scope.title;\n                var url = $scope.url;\n                UtilityService.isImage(url)\n                    .then(function(isImage) {\n                        var newLink = {\n                            title: title,\n                            url: url,\n                            user: UserService.getUserName(),\n                            isImage: isImage\n                        };\n                        ForgedditDataService.addLink(newLink)\n                            .success(function (data) {\n                                $scope.links.push(data);\n                                $scope.title = '';\n                                $scope.url = '';\n                                console.log('Success: link added');\n                            })\n                            .error(function () {\n                                console.log('Error: link not added');\n// TODO Fix Error when send link does not work\n                            });\n                    });\n\n            }\n\n            //=====================================================================\n            // Controller API\n            //=====================================================================\n\n            $scope.title = '';\n            $scope.url = '';\n            $scope.sendLink = sendLink;\n\n        }]);\n\n}());\n\n\n","/**\n * @brief Angular-controller for link content view\n *\n * @file link_content_ctrl.js\n * @author markus.wirrer\n */\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').controller('LinkCommentCtrl', ['$scope', 'ForgedditDataService', 'UserService',\n        function ($scope, ForgedditDataService, UserService) {\n\n            //=====================================================================\n            // private functions\n            //=====================================================================\n\n\t\t\t//----------------------------------------------------------------------\n\t\t\t// The method sends a comment to the backend\n\t\t\t//----------------------------------------------------------------------\n\t\t\tfunction sendComment(newComment) {\n                console.log('send comment clicked');\n\t\t\t\tvar linkId = $scope.link._id;\n                var theComment = {\n                    text: newComment,\n\t\t\t\t\tuser: UserService.getUserName()\n                };\n\t\t\t\tconsole.log('comment to add:' + theComment.text);\n                console.log('user to add:' + theComment.user);\n                ForgedditDataService.addComment(linkId, theComment)\n                    .success(function () {\n                        console.log('Success: comment added');\n\t\t\t\t\t\tvar addedComment = {\n\t\t\t\t\t\t\ttext: theComment.text,\n\t\t\t\t\t\t\ttime: Date.now(),\n\t\t\t\t\t\t\tuser: theComment.user\n\t\t\t\t\t\t};\n                        $scope.newComment = '';\n\t\t\t\t\t\t$scope.comments.push(addedComment);\n                        console.log('Success: DOM Comment Object added');\n                    })\n                    .error(function () {\n                        console.log('Error: comment not added');\n                        $scope.newComment = newComment;\n                    });\n            }\n\t\t\t\n            //=====================================================================\n            // Controller API\n            //=====================================================================\n\n            $scope.comments = $scope.link.comments;\n            $scope.newComment = '';\n            $scope.currentUserName = UserService.getUserName();\n            $scope.sendComment = sendComment;\n\n\n        }]);\n\n}());\n","/**\n * @brief Angular-controller for link content view\n *\n * @file link_content_ctrl.js\n * @author markus.wirrer\n */\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').controller('LinkContentCtrl', ['$scope', 'ForgedditDataService', 'UserService',\n        function ($scope, ForgedditDataService, UserService) {\n\n            //=====================================================================\n            // private functions\n            //=====================================================================\n\t\t\t\n\t\t\t//----------------------------------------------------------------------\n\t\t\t// The method toggles the display state of the comments part in the \n\t\t\t// link_content_view template by setting the showComments variable\n\t\t\t//----------------------------------------------------------------------\n\t\t\tfunction toggleComments(link) {\n\t\t\t\tif($scope.showComments === true) {\n\t\t\t\t\t$scope.showComments = false;\n\t\t\t\t\t$scope.showAddComment = false;\n\t\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$scope.showComments = true;\n\t\t\t\t\t$scope.showAddComment = true;\n\t\t\t\t\t}\n            }\n\n            function doEditStart() {\n                $scope.isEdit = true;\n                $scope.newTitle = $scope.link.title;\n            }\n\n            function doUpdateLink() {\n                var linkId = $scope.link._id;\n                var link = {\n                    title: $scope.newTitle\n                };\n                ForgedditDataService.updateLink(linkId, link)\n                    .success(function () {\n                        $scope.link.title = $scope.newTitle;\n                        console.log('Success: link updated');\n                    })\n                    .error(function () {\n                        console.log('Error: link not updated');\n// TODO Fix Error when send link does not work\n                    });\n            }\n\n            function doDeleteLink() {\n                var linkId = $scope.link._id;\n                ForgedditDataService.deleteLink(linkId)\n                    .success(function() {\n                        for (var i = 0, n = $scope.links.length; i < n; i++) {\n                            if ($scope.links[i]._id === linkId) {\n                                $scope.links.splice(i, 1);\n                                break;\n                            }\n                        }\n                    })\n                    .error(function() {\n                        console.log('Error: Link not deleted');\n                    });\n            }\n\n\n\n\n            //=====================================================================\n            // Controller API\n            //=====================================================================\n\n\n            $scope.canDelete = $scope.link.user === UserService.getUserName() || UserService.isAdmin();\n            $scope.isEdit = false;\n            $scope.canEdit = $scope.link.user === UserService.getUserName();\n            $scope.newTitle = $scope.link.title;\n            $scope.toggleComments = toggleComments;\n            $scope.doEditStart = doEditStart;\n            $scope.doUpdateLink = doUpdateLink;\n            $scope.doDeleteLink = doDeleteLink;\n\n        }]);\n\n}());\n","/**\n* @brief Angular-controller for showing the link-list\n*\n* @file link_list_ctrl.js\n* @author martin linggi\n*/\n\n(function() {\n    'use strict';\n\n\n    angular.module('forgedditApp').controller('LinkListCtrl', ['$scope', 'ForgedditDataService', 'UtilityService', 'AuthTokenService', 'UserService', 'SocketService',\n        function ($scope, ForgedditDataService, UtilityService, AuthTokenService, UserService, SocketService) {\n\n            //=====================================================================\n            // private functions\n            //=====================================================================\n\n            /**\n             * @brief Calculates a duration from now to a given timestamp\n             * @param time timestamp when something happened\n             * @returns {*} String (duration)\n             */\n            function getTimeAgo(time) {\n                return UtilityService.getDuration(time);\n            }\n\n            function refresh() {\n                if ($scope.newLinks.length > 0) {\n                    for (var i = 0, n = $scope.newLinks.length; i < n; i++) {\n                        $scope.links.push($scope.newLinks[i]);\n                    }\n                    $scope.newLinks = [];\n                }\n            }\n\n            /**\n             * @brief Sets the predicate and sort-order for the list\n             * @param searchPredicate name of the attribute to sort\n             * @param reverse sort-order\n             */\n            function sort(sortPredicate, reverse) {\n                $scope.sortPredicate = sortPredicate;\n                $scope.reverse = reverse;\n                refresh();\n            }\n\n            /**\n             * @brief Filter: Only Forgeddables which the user had commented\n             * @param link fordeddable to check\n             * @returns {boolean} true: is valid\n             */\n            function filterMyCommnentedForgeddables(link) {\n                for (var i = 0, n = link.comments.length; i < n; i++) {\n                    if (link.comments[i].user === UserService.getUserName()) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            /**\n             * @brief Filter: Only Forgeddables which the user had voted\n             * @param link fordeddable to check\n             * @returns {boolean} true: is valid\n             */\n            function filterMyVotedForgeddables(link) {\n                for (var i = 0, n = $scope.alreadyVoteList.length; i < n; i++) {\n                    if ($scope.alreadyVoteList[i].linkId === link._id) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            /**\n             * @brief Sets the filter expression\n             * @param filterPredicate\n             */\n            function filter(filterPredicate) {\n                var expression;\n                if (filterPredicate === 'user') {\n                    expression = {};\n                    expression.user = UserService.getUserName();\n                }\n                else if (filterPredicate === 'commented') {\n                    expression = filterMyCommnentedForgeddables;\n                }\n                else if (filterPredicate === 'voted') {\n                    expression = filterMyVotedForgeddables;\n                }\n                $scope.filterExpression = expression;\n                $scope.filterPredicate = filterPredicate;\n                refresh();\n            }\n\n            /**\n             * @brief Gets all the forgeddables from the data-service\n             */\n            function getLinks() {\n                ForgedditDataService.getLinks()\n                    .then(function (res) {\n                        $scope.links = res.data;\n                    }, function (error) {\n                        console.log('An error occured!', error);\n                    });\n            }\n\n            /**\n             * @brief Gets all the votes for the user (if logged in) from the data-service\n             */\n            function getVotes() {\n                var userName = UserService.getUserName();\n                ForgedditDataService.getVotes(userName)\n                    .then(function (res) {\n                        $scope.alreadyVoteList = res.data;\n                    }, function (error) {\n                        console.log('An error occured!', error);\n                    });\n            }\n\n            /**\n             * @brief Socket-Update: Changed link\n             * @param id the id of the changed link\n             */\n            function updateLink(id) {\n                ForgedditDataService.getLink(id)\n                    .then(function (res) {\n                        for (var i = 0, n = $scope.links.length; i < n; i++) {\n                            if ($scope.links[i]._id === id){\n                                $scope.links[i] = res.data;\n                            }\n                        }\n                    });\n            }\n\n            /**\n             * @brief Socket-Update: New Link\n             * @param aLink the new link\n             */\n            function newLink(aLink) {\n                // only add if not already exists\n                for (var i = 0, n = $scope.links.length; i < n; i++)\n                {\n                    if (aLink._id === $scope.links[i]._id)\n                    {\n                        return;\n                    }\n                }\n                $scope.newLinks.push(aLink);\n            }\n\n            //=====================================================================\n            // Controller API\n            //=====================================================================\n            $scope.getTimeAgo = getTimeAgo;\n            $scope.sort = sort;\n            $scope.filter = filter;\n            $scope.refresh = refresh;\n            $scope.links = [];\n            $scope.alreadyVoteList = [];\n            $scope.newLinks = [];\n            sort('time', true);\n            getVotes();\n            filter('');\n            getLinks();\n            SocketService.on('updateLink', updateLink);\n            SocketService.on('newLink', newLink);\n        }]);\n\n}());","/**\n * @brief Angular-controller for voting a link\n *\n * @file link_vote_ctrl.js\n * @author martin linggi\n */\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').controller('LinkVoteCtrl', ['$scope', 'ForgedditDataService',\n        function ($scope, ForgedditDataService) {\n\n            //=====================================================================\n            // private functions\n            //=====================================================================\n\n            /**\n             * @brief Vote-Action\n             * @param link\n             * @param value\n             */\n            function voteAction(value) {\n                var id = $scope.link._id;\n                var userName = $scope.username;\n                ForgedditDataService.voteLink(id, userName, value)\n                    .success(function () {\n                        $scope.link.rate += value;\n                        var index = getAlreadyVotedIndex(-value);\n                        if (index > -1) {\n                            $scope.alreadyVoteList.splice(index,1);\n                        }\n                        else {\n                            $scope.alreadyVoteList.push({linkId:id, vote:value});\n                        }\n                        refreshVoteArrows();\n                    })\n                    .error(function (data, status) {\n                        console.log('An error occured!', status, data);\n                    });\n            }\n\n            /**\n             * @brief Refreshes the Flags for the UI-Indication of the Arrows\n             */\n            function refreshVoteArrows() {\n                $scope.isVoteUpActive = getAlreadyVotedIndex(1) === -1;\n                $scope.isVoteDownActive = getAlreadyVotedIndex(-1) === -1;\n            }\n\n            /**\n             * @brief Checks if the user has already voted this link (up or down)\n             *\n             * If the user has already voted the link a non negative number is returned, otherwise -1.\n             * The number is th index of the entry in the 'already-voted' list\n             *\n             * @param value 1=vote up, -1=vote down\n             * @returns {number} index of the 'already-voted'-entry in the list\n             */\n            function getAlreadyVotedIndex(value) {\n                for (var i = 0, n = $scope.alreadyVoteList.length; i < n; i++) {\n                    if ($scope.alreadyVoteList[i].linkId === $scope.link._id && $scope.alreadyVoteList[i].vote === value) {\n                        console.log('Vote disabled: ' + $scope.link._id + ': ' + $scope.link.title + ' value: ' + value);\n                        return i;\n                    }\n                }\n                return -1;\n            }\n\n            //=====================================================================\n            // Controller API\n            //=====================================================================\n\n            $scope.isVoteUpActive = false;\n            $scope.isVoteDownActive = false;\n            $scope.$watch(function(scope) {return $scope.alreadyVoteList;}, refreshVoteArrows());\n            $scope.voteAction = voteAction;\n        }]);\n\n}());\n","/**\n * @brief Angular-directive for the user-list\n *\n * @file admin_user_list.js\n * @author martin linggi\n */\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').directive('userListView', function () {\n\n        //=====================================================================\n        // Directive API\n        //=====================================================================\n        return {\n            restrict: 'E',\n            templateUrl: 'templates/admin/user_list_view.html',\n            controller: 'AdminUserListCtrl'\n        };\n    });\n\n}());","/**\n * Created by martinlinggi on 23.11.14.\n */\n// Common directive for Focus\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').directive('focus', ['$timeout',\n\n        function($timeout) {\n            return {\n                scope : {\n                    trigger : '@focus'\n                },\n\n                link : function(scope, element) {\n                    scope.$watch('trigger', function(value) {\n                        if (value === \"true\") {\n                            $timeout(function() {\n                                element[0].focus();\n                            });\n                        }\n                    });\n                }\n            };\n        }]);\n}());\n\n","/**\n * @brief Angular-directive for the footer template\n *\n * @file footer.js\n * @author martin linggi\n */\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').directive('footerDiv', function () {\n\n        //=====================================================================\n        // Directive API\n        //=====================================================================\n\n        return {\n            restrict: 'E',\n            templateUrl: 'templates/footer.html'\n\n        };\n    });\n\n}());\n","/**\n * @brief Angular-directive for the header template\n *\n * @file header.js\n * @author martin linggi\n */\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').directive('headerDiv', function () {\n\n        //=====================================================================\n        // Directive API\n        //=====================================================================\n\n        return {\n            restrict: 'E',\n            templateUrl: 'templates/header.html'\n\n        };\n    });\n\n}());\n","/**\n * @brief Angular-directive for the add-link-formular\n *\n * @file link_add.js\n * @author martin linggi\n */\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').directive('linkAddView', function () {\n\n        //=====================================================================\n        // Directive API\n        //=====================================================================\n        return {\n            restrict: 'E',\n            templateUrl: 'templates/link_add_view.html',\n            controller: 'addLinkController'\n        };\n    });\n\n}());","/**\n* @brief Angular-directive for the link-content\n    *\n    * @file link_content.js\n* @author martin linggi\n*/\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').directive('linkCommentView', function () {\n\n        //=====================================================================\n        // Directive API\n        //=====================================================================\n\n        return {\n            restrict: 'E',\n            templateUrl: 'templates/link_comment_view.html',\n            controller: 'LinkCommentCtrl'\n        };\n    });\n\n}());","/**\n * @brief Angular-directive for the link-content\n *\n * @file link_content.js\n * @author martin linggi\n */\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').directive('linkContentView', function () {\n\n        //=====================================================================\n        // Directive API\n        //=====================================================================\n\n        return {\n            restrict: 'E',\n            templateUrl: 'templates/link_content_view.html',\n\t\t\tcontroller: 'LinkContentCtrl'\n        };\n    });\n\n}());","/**\n * @brief Angular-directive for the link-list\n *\n * @file link_list.js\n * @author martin linggi\n */\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').directive('linkListView', function () {\n\n        //=====================================================================\n        // Directive API\n        //=====================================================================\n        return {\n            restrict: 'E',\n            templateUrl: 'templates/link_list_view.html',\n            controller: 'LinkListCtrl'\n        };\n    });\n\n}());","/**\n * @brief Angular-directive for the thumbs-image template\n *\n * @file link_thumb.js\n * @author martin linggi\n */\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').directive('linkThumbView', function () {\n\n        //=====================================================================\n        // Directive API\n        //=====================================================================\n\n        return {\n            restrict: 'E',\n            templateUrl: 'templates/link_thumb_view.html'\n        };\n    });\n\n}());","/**\n * @brief Angular-directive for the vote-link template\n *\n * @file link_votes.js\n * @author martin linggi\n */\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').directive('linkVoteView', function () {\n\n        //=====================================================================\n        // Directive API\n        //=====================================================================\n\n        return {\n            restrict: 'E',\n            templateUrl: 'templates/link_vote_view.html',\n            controller: 'LinkVoteCtrl'\n\n        };\n    });\n\n}());","  angular.module('forgedditApp').directive('modalDialog', function () {\n  console.log('Overlay directive called');\n  return {\n    restrict: 'E',\n    scope: {\n      show: '='\n    },\n    replace: true, // Replace with the template below\n    transclude: true, // we want to insert custom content inside the directive\n    link: function(scope, element, attrs) {\n      scope.dialogStyle = {};\n      if (attrs.width)\n        scope.dialogStyle.width = attrs.width;\n      if (attrs.height)\n        scope.dialogStyle.height = attrs.height;\n      scope.hideModal = function() {\n        scope.show = false;\n      };\n    },\n    templateUrl: 'templates/modal_dialog.html'\n  };\n});","/**\n * @brief Angular-Service for the authentication token management\n *\n * @file auth_token_service.js\n * @author martin linggi\n */\n\n\n(function(){\n    'use strict';\n\n    angular.module('forgedditApp').factory('AuthTokenService', ['$window', function ($window) {\n\n        //=====================================================================\n        // private variables\n        //=====================================================================\n\n        var _store = $window.localStorage;\n        var _key = 'auth-token';\n        var _isAuth;\n\n        //=====================================================================\n        // private functions\n        //=====================================================================\n        function getToken() {\n            return _store.getItem(_key);\n        }\n\n        function setToken(token) {\n            if (token) {\n                _store.setItem(_key, token);\n            } else {\n                _store.removeItem(_key);\n            }\n        }\n\n        function isAuthenticated()\n        {\n            return _isAuth;\n        }\n\n        function setAuthenticated(state)\n        {\n            _isAuth = state;\n        }\n\n        //=====================================================================\n        // Service API\n        //=====================================================================\n        return {\n            getToken: getToken,\n            setToken: setToken,\n            isAuthenticated: isAuthenticated,\n            setAuthenticated: setAuthenticated\n        };\n\n    }]);\n}());\n\n","/**\n * @brief Angular-Service for the REST-API of the link data\n *\n * @file forgeddit_data_service.js\n * @author martin linggi\n */\n\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').factory('ForgedditDataService', ['$http', function ($http) {\n\n        //=====================================================================\n        // private functions\n        //=====================================================================\n        function getLinks() {\n            return $http.get('/api/links');\n        }\n\n        function getLink(id) {\n            return $http.get('/api/links/' + id);\n        }\n\n        function getVotes(userName) {\n            return $http.get('/api/votes/' + userName);\n        }\n\n        function addLink(newLink) {\n            return $http.post('/api/links', newLink);\n        }\n\n        function updateLink(id, linkData) {\n            return $http.put('/api/links/' + id, linkData);\n        }\n\n        function deleteLink(id) {\n            return $http.delete('api/links/' + id);\n        }\n\n        function voteLink(id, userName, value) {\n            return $http.put('/api/links/' + id + '/vote', {value: value, userName: userName});\n        }\n\t\t\n\t\tfunction addComment(id, newComment) {\n            return $http.post('/api/links/' + id + '/comments', newComment);\n        }\n\n        //=====================================================================\n        // Service API\n        //=====================================================================\n        return {\n            getLinks: getLinks,\n            getLink: getLink,\n            getVotes: getVotes,\n            addLink: addLink,\n            updateLink: updateLink,\n            deleteLink: deleteLink,\n            voteLink: voteLink,\n\t\t\taddComment: addComment\n        };\n\n    }]);\n\n}());","/**\n * @brief Angular-Service for the socket io updates\n *\n * @file socket_service.js\n * @author martin linggi\n */\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').factory('SocketService', ['$rootScope', function ($rootScope) {\n\n        //=====================================================================\n        // private variables\n        //=====================================================================\n        var socket = io.connect();\n\n        //=====================================================================\n        // private functions\n        //=====================================================================\n        function on(eventName, callback) {\n            socket.on(eventName, function () {\n                var args = arguments;\n                $rootScope.$apply(function () {\n                    callback.apply(socket, args);\n                });\n            });\n        }\n\n        function emit(eventName, data, callback) {\n            if (typeof data == 'function') {\n                callback = data;\n                data = {};\n            }\n            socket.emit(eventName, data, function () {\n                var args = arguments;\n                $rootScope.$apply(function () {\n                    if (callback) {\n                        callback.apply(socket, args);\n                    }\n                });\n            });\n        }\n\n        function emitAndListen(eventName, data, callback) {\n            emit(eventName, data, callback);\n            on(eventName, callback);\n        }\n\n        //=====================================================================\n        // Service API\n        //=====================================================================\n        return {\n            on: on,\n            emit: emit,\n            emitAndListen: emitAndListen\n        };\n    }]);\n}());","/**\n * @brief Angular-Service injects the authentication token into the header of the requests\n *\n * @file token_interceptor.js\n * @author martin linggi\n */\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').factory('TokenInterceptor', ['$q', '$location', 'AuthTokenService',\n        function ($q, $location, AuthTokenService) {\n\n        //=====================================================================\n        // private functions\n        //=====================================================================\n        function request(config) {\n            config.headers = config.headers || {};\n            var token = AuthTokenService.getToken();\n            if (token) {\n                config.headers.Authorization = 'Bearer ' + token;\n            }\n            return config;\n        }\n\n        function requestError(rejection) {\n            return $q.reject(rejection);\n        }\n\n        function response(res) {\n            if (res !== null && res.status === 200 && AuthTokenService.getToken() && !AuthTokenService.isAuthenticated()) {\n                AuthTokenService.setAuthenticated(true);\n            }\n            return res || $q.when(res);\n        }\n\n        function responseError(rejection) {\n            if (rejection !== null && rejection.status === 401 && AuthTokenService.getToken() && AuthTokenService.isAuthenticated()) {\n                AuthTokenService.setToken();\n                AuthTokenService.setAuthenticated(false);\n                $location.path('/');\n            }\n            return $q.reject(rejection);\n        }\n\n        //=====================================================================\n        // Service API\n        //=====================================================================\n        return {\n            request: request,\n            requestError: requestError,\n            response: response,\n            responseError: responseError\n        };\n    }]);\n}());","/**\n * @brief Angular-Service for the REST API of the user data\n *\n * @file user_data_service.js\n * @author martin linggi\n */\n(function() {\n    'use strict';\n\n\n    angular.module('forgedditApp').factory('UserDataService', ['$http', function ($http) {\n\n        //=====================================================================\n        // private functions\n        //=====================================================================\n        function getUsers() {\n            return $http.get('/api/users');\n        }\n\n        function getUser(userName) {\n            console.log('GET user: ', userName);\n            return $http.get('/api/users/' + userName);\n        }\n\n        function addUser(newUser) {\n            console.log('POST new user: ', newUser);\n            return $http.post('/api/users', newUser);\n        }\n\n        function updateUser(username, user) {\n            return $http.put('/api/users/' + username, user);\n        }\n\n        function deleteUserByName(username) {\n            return $http.delete('/api/users/' + username);\n        }\n\n        //=====================================================================\n        // Service API\n        //=====================================================================\n        return {\n            getUsers: getUsers,\n            getUser: getUser,\n            addUser: addUser,\n            updateUser: updateUser,\n            deleteUserByName: deleteUserByName\n        };\n\n    }]);\n\n}());","/**\n * @brief Angular-Service for the login and logout of the user\n *\n * @file user_service.js\n * @author martin linggi\n */\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').factory('UserService', ['$http', '$q', 'AuthTokenService', function ($http, $q, AuthTokenService) {\n\n        var _userName = \"\";\n        var _isAdmin = false;\n\n\n        //=====================================================================\n        // private functions\n        //=====================================================================\n        function login(username, password) {\n            return $http.post('/api/users/login', {username: username, password: password});\n        }\n\n        function logout() {\n            AuthTokenService.setToken();\n            AuthTokenService.setAuthenticated(false);\n        }\n\n        function getSessionData() {\n            if (AuthTokenService.getToken()) {\n                return $http.get('/api/users/me');\n            } else {\n                return $q.reject({ data: 'client has no auth token' });\n            }\n        }\n\n        function setUser(userName, isAdmin){\n            _userName = userName;\n            _isAdmin = isAdmin;\n        }\n\n        function getUserName() {\n            return _userName;\n        }\n\n        function isAdmin() {\n            return _isAdmin;\n        }\n\n        //=====================================================================\n        // Service API\n        //=====================================================================\n        return {\n            login: login,\n            logout: logout,\n            getSessionData: getSessionData,\n            setUser: setUser,\n            getUserName: getUserName,\n            isAdmin: isAdmin\n\n        };\n\n    }]);\n\n}());","/**\n * @brief Angular-Service for the utility-functions\n *\n * @file utility_service.js\n * @author martin linggi\n */\n\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').factory('UtilityService', ['$q', function ($q) {\n\n        //=====================================================================\n        // private functions\n        //=====================================================================\n\n        /**\n         * @brief Checks if the url is an image\n         * @param src\n         * @returns {*} the promise\n         */\n\n        function isImage(src) {\n            var deferred = $q.defer();\n\n            var image = new Image();\n            image.onerror = function() {\n                deferred.resolve(false);\n            };\n            image.onload = function() {\n                deferred.resolve(true);\n            };\n            image.src = src;\n\n            return deferred.promise;\n        }\n\n        /**\n         * @brief Calculates the duration between now and a given date\n         * @param time the given date\n         * @returns {string} the duration in seconds, minutes, hours, days, weeks, months or years\n         */\n        function getDuration(time) {\n            var millis = new Date().getTime() - time;\n            var oneSec = 1000;\n            var oneMin = oneSec * 60;\n            var oneHour = oneMin * 60;\n            var oneDay = oneHour * 24;\n            var oneWeek = oneDay * 7;\n            var oneMonth = oneDay * 31;\n            var oneYear = oneDay * 365;\n            if (millis < oneSec) {\n                return 'just now';\n            }\n            else if (millis < 10 * oneSec) {  // 1 second steps\n                return Math.round(millis / oneSec) + ' seconds ago';\n            }\n            else if (millis < oneMin) {  //  10 seconds steps\n                return Math.round(millis / (oneSec * 10)) * 10 + ' seconds ago';\n            }\n            else if (millis < oneMin * 10) {  // 1 minute steps\n                return Math.round(millis / oneMin) + ' minutes ago';\n            }\n            else if (millis < oneHour) {  // 10 minute steps\n                return Math.round(millis / (10 * oneMin)) * 10 + ' minutes ago';\n            }\n            else if (millis < oneDay) {  // 1 hour steps\n                return Math.round(millis / oneHour) + ' hours ago';\n            }\n            else if (millis < oneWeek) {  //  1 day steps\n                return Math.round(millis / oneDay) + ' days ago';\n            }\n            else if (millis < oneMonth) {  //  1 week steps\n                return Math.round(millis / oneWeek) + ' weeks ago';\n            }\n            else if (millis < oneYear) {  //  1 month steps\n                return Math.round(millis / oneMonth) + ' months ago';\n            }\n            else {  // 1 year steps\n                return Math.round(millis / oneYear) + ' years ago';\n            }\n        }\n\n\n        //=====================================================================\n        // Service API\n        //=====================================================================\n        return {\n            isImage: isImage,\n            getDuration: getDuration\n        };\n\n    }]);\n\n}());\n","/**\n * @brief Angular-Service for the REST-API of the vote data\n *\n * @file vote_data_service.js\n * @author martin linggi\n */\n\n\n(function() {\n    'use strict';\n\n    angular.module('forgedditApp').factory('VoteDataService', ['$http', function ($http) {\n\n        //=====================================================================\n        // private functions\n        //=====================================================================\n        function getVotesByUserName(userName) {\n            return $http.get('/api/votes/' + userName);\n        }\n\n        function addLink(newLink) {\n            return $http.post('/api/links', newLink);\n        }\n\n        function voteLink(id, value) {\n            return $http.put('/api/links/' + id + '/vote', {value: value});\n        }\n\n        //=====================================================================\n        // Service API\n        //=====================================================================\n        return {\n            getLinks: getVotesByUserName,\n            addLink: addLink,\n            voteLink: voteLink\n        };\n\n    }]);\n\n}());"],"sourceRoot":"/source/"}